2.1 Write code to remove duplicates from an unsorted linked list.==========Solution:1. Add the first element to a hash table, then check the second element, if the elementexists in the hash table, delete the element, if not, add the element to the hash table, and then check the third element, etc...FOLLOW UPSolution:1. Use two-for-loop like method to compare the elements of the linked list. One pointer iterates through the linked list, and another pointer checks all subsequent elements.2.2 Implement an algorithm to find the kth to last element (倒数第k个) of a singly linked list.==========Solution:1. Traverse the linked list to get the length, and then traverse again to find the kth to last element. 2. Use two pointers. Initially, a pointer points at the first element, another pointer points at the kthelement. Then two pointers move forward, if the second pointer points at the last element (i.e., point->next = NULL),then the first pointer points at the kth to last element.2.3 Implement an alogorithm to delete a node in the middle of a singly linked list, given only access to thatnode. Input: delete node c from the linked list: a->b->c->d->e, Output: a->b->d->e==========Solution:1. copy the data and the pointer member of the next node to that node. ```Cc->data = c->next->datac->next = c->next->next```