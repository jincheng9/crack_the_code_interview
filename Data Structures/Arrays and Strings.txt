1.1 Implement an alogorithm to determine if a string has all unique characters. What if you cannot use additional
data structures?
==========
Solution: 
1. Use an array of length 128 to store the number of each character (from 00000000 to 01111111), if there is an element larger
than 1, then this string doesn't have all unique characters. (O(n)) 

2. If we cannot use additional data structrures, then we can use a double for-loop to compare the characters in 
the string, if there exists the same character, then the string doesn't have all unique characters. (O(n^2))

or we can sort the characters in the string, and then traverse all characters to compare the neighbouring characters. (O(nlg(n)))

1.2 Implement a function void reverse(char* str) in C or C++ which reverses a null terminated string.
==========
Solution:
1. First get the length of the string, say n, and then exchange the characters 0<->n-1, 1<->n-2, ...

1.3 Given two strings, write a method to decide if one is a permutation of the other.
==========
Solution:
1. Compute the number of each character for each string. If the number of each character
is the same between two strings, then one is a permutation of the other.

1.4 Write a method to replace all spaces in a string with '%20'
==========
Solution:
First, count the number of spaces, then we know the length of the new string. Then we can 
1. Create a new string, and traverse the old string, if it's not a space, keep the original character in the 
new string, otherwise, replace the space with '%20'. 
2. Extend the length of the old string, then edit the string backwards. Thus we don't need to create a new string.
